// SPDX-License-Identifier: MIT

pragma solidity ^0.8.20;

import { TransferHelper } from '../utils/TransferHelper.sol';
import { Context } from '../utils/Context.sol';

contract Vault is Context {

    address constant internal nativeAddress = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;

    event ChangedOwner(address indexed _previousOwner, address indexed _newOwner);
    event Withdrawn(address indexed _tokenAddr, address indexed _recipient, uint256 _amount);

    error NotOwner(address _addr);

    bytes32 private constant SLOT_VAULT_STORAGE = keccak256(abi.encodePacked('smart.executor.slot.vault.storage'));

    struct Data {
        address owner;
    }

    receive() external payable {}

    constructor() {
        load().owner = _msgSender();
    }

    modifier onlyOwner() {
        address msgSender = _msgSender();
        if (owner() != msgSender) {
            revert NotOwner(msgSender);
        }

        _;
    }

    function ownerCall(address _target, bytes calldata _calldata, uint256 _value) external onlyOwner payable {
        (bool success,) = _target.call{value: _value}(_calldata);
        
        require(success, 'Vault: Owner Call Fail');
    }

    function withdrawToken(address _tokenAddr, address _recipient, uint256 _amount) external onlyOwner {
        TransferHelper.safeTransfer(_tokenAddr, _recipient, _amount);

        emit Withdrawn(_tokenAddr, _recipient, _amount);
    }

    function withdrawNative(address _recipient, uint256 _amount) external onlyOwner {
        TransferHelper.safeTransferETH(_recipient, _amount);

        emit Withdrawn(nativeAddress, _recipient, _amount);
    }

    function setOwner(address _newOwner) external onlyOwner {
        emit ChangedOwner(owner(), _newOwner);

        load().owner = _newOwner;
    }

    function owner() public view returns (address) {
        return load().owner;
    }

    function load() internal pure returns (Data storage data) {
        bytes32 slot = SLOT_VAULT_STORAGE;

        assembly {
            data.slot := slot
        }
    }
}